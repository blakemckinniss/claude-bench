#!/bin/bash
# Python Code Quality Checker Script
# Reports code quality issues without making any changes
# Author: Generated by Claude Code Assistant
# Usage: ./python_quality_checker.sh [directory]

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Default directory is current directory
TARGET_DIR="${1:-.}"

echo -e "${BLUE}🔍 Python Code Quality Checker${NC}"
echo -e "${BLUE}===================================${NC}"
echo "Target directory: $(realpath "$TARGET_DIR")"
echo ""

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to print step headers
print_step() {
    echo -e "${BLUE}📋 $1${NC}"
    echo "----------------------------------------"
}

# Function to print success messages
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Function to print warnings
print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Function to print errors
print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Function to print info
print_info() {
    echo -e "${PURPLE}ℹ️  $1${NC}"
}

# Check if target directory exists
if [[ ! -d "$TARGET_DIR" ]]; then
    print_error "Directory '$TARGET_DIR' does not exist!"
    exit 1
fi

# Count Python files
PYTHON_FILES=$(find "$TARGET_DIR" -name "*.py" -type f | wc -l)
if [[ $PYTHON_FILES -eq 0 ]]; then
    print_warning "No Python files found in '$TARGET_DIR'"
    exit 0
fi

echo "Found $PYTHON_FILES Python files to analyze"
echo ""

# Check tool availability
print_step "Tool Availability Check"

TOOLS=("pyupgrade" "autoflake" "black" "ruff" "refurb")
AVAILABLE_TOOLS=()
MISSING_TOOLS=()

for tool in "${TOOLS[@]}"; do
    if command_exists "$tool"; then
        print_success "$tool is available"
        AVAILABLE_TOOLS+=("$tool")
    else
        print_warning "$tool is not installed"
        MISSING_TOOLS+=("$tool")
    fi
done

if [[ ${#MISSING_TOOLS[@]} -gt 0 ]]; then
    echo ""
    print_info "Install missing tools with: pip install ${MISSING_TOOLS[*]}"
fi

echo ""

# Initialize counters
TOTAL_ISSUES=0
ISSUE_SUMMARY=()

# Check Python syntax
print_step "Python Syntax Check"

SYNTAX_ERRORS=0
while IFS= read -r -d '' file; do
    if ! python -m py_compile "$file" 2>/dev/null; then
        print_error "Syntax error in: $file"
        ((SYNTAX_ERRORS++))
    fi
done < <(find "$TARGET_DIR" -name "*.py" -type f -print0)

if [[ $SYNTAX_ERRORS -eq 0 ]]; then
    print_success "All Python files have valid syntax"
else
    print_error "$SYNTAX_ERRORS files have syntax errors"
    ISSUE_SUMMARY+=("$SYNTAX_ERRORS syntax errors")
    ((TOTAL_ISSUES += SYNTAX_ERRORS))
fi

echo ""

# Check with available tools
if command_exists "ruff"; then
    print_step "Ruff Linting Check"
    
    if RUFF_OUTPUT=$(ruff check "$TARGET_DIR" 2>&1); then
        print_success "No ruff issues found"
    else
        # Count issues from ruff output
        RUFF_ISSUES=$(echo "$RUFF_OUTPUT" | grep -c "error\|warning" || echo "0")
        if [[ $RUFF_ISSUES -gt 0 ]]; then
            print_warning "$RUFF_ISSUES ruff issues found"
            echo "$RUFF_OUTPUT" | head -10
            if [[ $(echo "$RUFF_OUTPUT" | wc -l) -gt 10 ]]; then
                echo "... (showing first 10 issues, run 'ruff check $TARGET_DIR' for all)"
            fi
            ISSUE_SUMMARY+=("$RUFF_ISSUES ruff issues")
            ((TOTAL_ISSUES += RUFF_ISSUES))
        fi
    fi
    echo ""
fi

if command_exists "black"; then
    print_step "Black Formatting Check"
    
    if BLACK_OUTPUT=$(black --check --diff "$TARGET_DIR" 2>&1); then
        print_success "All files are properly formatted"
    else
        BLACK_ISSUES=$(echo "$BLACK_OUTPUT" | grep -c "would reformat" || echo "0")
        if [[ $BLACK_ISSUES -gt 0 ]]; then
            print_warning "$BLACK_ISSUES files need formatting"
            ISSUE_SUMMARY+=("$BLACK_ISSUES formatting issues")
            ((TOTAL_ISSUES += BLACK_ISSUES))
        fi
    fi
    echo ""
fi

if command_exists "autoflake"; then
    print_step "Autoflake Check (Unused Imports/Variables)"
    
    AUTOFLAKE_ISSUES=$(autoflake --check --remove-all-unused-imports --remove-unused-variables --recursive "$TARGET_DIR" 2>&1 | grep -c "would be modified" || true)
    if [[ -z "$AUTOFLAKE_ISSUES" ]]; then
        AUTOFLAKE_ISSUES=0
    fi
    
    if [[ $AUTOFLAKE_ISSUES -eq 0 ]]; then
        print_success "No unused imports or variables found"
    else
        print_warning "$AUTOFLAKE_ISSUES files have unused imports/variables"
        ISSUE_SUMMARY+=("$AUTOFLAKE_ISSUES unused import/variable issues")
        ((TOTAL_ISSUES += AUTOFLAKE_ISSUES))
    fi
    echo ""
fi

if command_exists "refurb"; then
    print_step "Refurb Check (Modernization Opportunities)"
    
    if REFURB_OUTPUT=$(refurb "$TARGET_DIR" 2>&1); then
        print_success "No refurb suggestions found"
    else
        REFURB_ISSUES=$(echo "$REFURB_OUTPUT" | grep -c "FURB" || echo "0")
        if [[ $REFURB_ISSUES -gt 0 ]]; then
            print_info "$REFURB_ISSUES modernization opportunities found"
            echo "$REFURB_OUTPUT" | head -10
            if [[ $(echo "$REFURB_OUTPUT" | wc -l) -gt 10 ]]; then
                echo "... (showing first 10 suggestions, run 'refurb $TARGET_DIR' for all)"
            fi
            # Don't count refurb suggestions as critical issues
        fi
    fi
    echo ""
fi

# Summary
print_step "Summary Report"

echo "Files analyzed: $PYTHON_FILES Python files"

if [[ $TOTAL_ISSUES -eq 0 ]]; then
    print_success "Excellent! No critical code quality issues found! 🎉"
else
    print_warning "Found $TOTAL_ISSUES total issues:"
    for issue in "${ISSUE_SUMMARY[@]}"; do
        echo "  • $issue"
    done
    echo ""
    print_info "Run './python_quality_fixer.sh $TARGET_DIR' to automatically fix most issues"
fi

# Tool recommendations
if [[ ${#MISSING_TOOLS[@]} -gt 0 ]]; then
    echo ""
    print_info "Recommended: Install missing tools for complete analysis:"
    echo "  pip install ${MISSING_TOOLS[*]}"
fi

echo ""
if [[ $TOTAL_ISSUES -eq 0 && $SYNTAX_ERRORS -eq 0 ]]; then
    print_success "Code quality check passed! ✨"
    exit 0
else
    print_warning "Code quality check found issues that should be addressed"
    exit 1
fi