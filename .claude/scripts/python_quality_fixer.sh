#!/bin/bash
# Python Code Quality Fixer Script
# Automatically applies code quality fixes using multiple Python tools
# Author: Generated by Claude Code Assistant
# Usage: ./python_quality_fixer.sh [directory]

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default directory is current directory
TARGET_DIR="${1:-.}"

# Counter for tracking fixes
TOTAL_FIXES=0

echo -e "${BLUE}🔧 Python Code Quality Fixer${NC}"
echo -e "${BLUE}================================${NC}"
echo "Target directory: $(realpath "$TARGET_DIR")"
echo ""

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to print step headers
print_step() {
    echo -e "${BLUE}📋 Step $1: $2${NC}"
    echo "----------------------------------------"
}

# Function to print success messages
print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Function to print warnings
print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Function to print errors
print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Function to count Python files
count_python_files() {
    find "$TARGET_DIR" -name "*.py" -type f | wc -l
}

# Check if target directory exists
if [[ ! -d "$TARGET_DIR" ]]; then
    print_error "Directory '$TARGET_DIR' does not exist!"
    exit 1
fi

# Count Python files
PYTHON_FILES=$(count_python_files)
if [[ $PYTHON_FILES -eq 0 ]]; then
    print_warning "No Python files found in '$TARGET_DIR'"
    exit 0
fi

echo "Found $PYTHON_FILES Python files to process"
echo ""

# Step 1: Check tool availability
print_step "1" "Checking Tool Availability"

REQUIRED_TOOLS=("pyupgrade" "autoflake" "black" "ruff")
MISSING_TOOLS=()

for tool in "${REQUIRED_TOOLS[@]}"; do
    if command_exists "$tool"; then
        print_success "$tool is available"
    else
        MISSING_TOOLS+=("$tool")
        print_error "$tool is not installed"
    fi
done

if [[ ${#MISSING_TOOLS[@]} -gt 0 ]]; then
    echo ""
    print_error "Missing tools: ${MISSING_TOOLS[*]}"
    echo "Install them with: pip install ${MISSING_TOOLS[*]}"
    exit 1
fi

echo ""

# Step 2: Run pyupgrade for Python syntax modernization
print_step "2" "Modernizing Python Syntax (pyupgrade)"

echo "Running pyupgrade --py38-plus on Python files..."
PYUPGRADE_COUNT=0

while IFS= read -r -d '' file; do
    if pyupgrade --py38-plus "$file" 2>/dev/null; then
        ((PYUPGRADE_COUNT++))
    fi
done < <(find "$TARGET_DIR" -name "*.py" -type f -print0)

if [[ $PYUPGRADE_COUNT -gt 0 ]]; then
    print_success "Modernized $PYUPGRADE_COUNT files"
    ((TOTAL_FIXES += PYUPGRADE_COUNT))
else
    print_success "All files already use modern Python syntax"
fi

echo ""

# Step 3: Run autoflake to remove unused imports and variables
print_step "3" "Removing Unused Imports and Variables (autoflake)"

echo "Running autoflake on all Python files..."
AUTOFLAKE_OUTPUT=$(autoflake --remove-all-unused-imports --remove-unused-variables --in-place --recursive "$TARGET_DIR" 2>&1)

# Count files that were modified by checking git status or using autoflake's check mode
AUTOFLAKE_FIXED=$(autoflake --check --remove-all-unused-imports --remove-unused-variables --recursive "$TARGET_DIR" 2>&1 | grep -c "would be modified" || true)

if [[ $AUTOFLAKE_FIXED -eq 0 ]]; then
    print_success "No unused imports or variables found"
else
    print_success "Cleaned up unused imports/variables in $AUTOFLAKE_FIXED files"
    ((TOTAL_FIXES += AUTOFLAKE_FIXED))
fi

echo ""

# Step 4: Run Black for code formatting
print_step "4" "Formatting Code (black)"

echo "Running black on all Python files..."
BLACK_OUTPUT=$(black "$TARGET_DIR" 2>&1)

# Parse black output to count reformatted files
BLACK_FIXED=$(echo "$BLACK_OUTPUT" | grep -c "reformatted" || true)

if [[ $BLACK_FIXED -eq 0 ]]; then
    print_success "All files already properly formatted"
else
    print_success "Reformatted $BLACK_FIXED files"
    ((TOTAL_FIXES += BLACK_FIXED))
fi

echo ""

# Step 5: Run Ruff for linting and auto-fixes
print_step "5" "Fixing Linting Issues (ruff)"

echo "Running ruff check --fix on all Python files..."

# Run ruff and capture output
if RUFF_OUTPUT=$(ruff check "$TARGET_DIR" --fix 2>&1); then
    print_success "No linting issues found"
else
    # Parse ruff output to see if fixes were applied
    if echo "$RUFF_OUTPUT" | grep -q "fixed"; then
        RUFF_FIXED=$(echo "$RUFF_OUTPUT" | grep -o '[0-9]\+ fixed' | grep -o '[0-9]\+' || echo "0")
        print_success "Fixed $RUFF_FIXED linting issues"
        ((TOTAL_FIXES += RUFF_FIXED))
        
        # Show remaining issues if any
        if echo "$RUFF_OUTPUT" | grep -q "Found.*error"; then
            REMAINING_ISSUES=$(echo "$RUFF_OUTPUT" | grep -o '[0-9]\+ error' | grep -o '[0-9]\+' || echo "0")
            print_warning "$REMAINING_ISSUES issues require manual attention"
        fi
    else
        print_warning "Some issues may require manual attention"
    fi
fi

echo ""

# Step 6: Final validation
print_step "6" "Final Validation"

echo "Running final checks..."

# Check if Python files compile
SYNTAX_ERRORS=0
while IFS= read -r -d '' file; do
    if ! python -m py_compile "$file" 2>/dev/null; then
        print_error "Syntax error in: $file"
        ((SYNTAX_ERRORS++))
    fi
done < <(find "$TARGET_DIR" -name "*.py" -type f -print0)

if [[ $SYNTAX_ERRORS -eq 0 ]]; then
    print_success "All Python files compile successfully"
else
    print_error "$SYNTAX_ERRORS files have syntax errors"
fi

# Final ruff check
if ruff check "$TARGET_DIR" >/dev/null 2>&1; then
    print_success "Ruff: All checks passed"
else
    print_warning "Ruff: Some issues remain (run 'ruff check $TARGET_DIR' for details)"
fi

# Final black check  
if black --check "$TARGET_DIR" >/dev/null 2>&1; then
    print_success "Black: All files properly formatted"
else
    print_warning "Black: Some formatting issues remain"
fi

echo ""

# Summary
print_step "✨" "Summary"

echo "Files processed: $PYTHON_FILES Python files"
echo "Total fixes applied: $TOTAL_FIXES"

if [[ $TOTAL_FIXES -gt 0 ]]; then
    print_success "Code quality improvements completed successfully!"
else
    print_success "Code quality is already excellent - no fixes needed!"
fi

if [[ $SYNTAX_ERRORS -eq 0 ]]; then
    print_success "All files maintain functionality"
    exit 0
else
    print_error "Some files have syntax errors that need manual attention"
    exit 1
fi